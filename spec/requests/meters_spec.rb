 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/meters", type: :request do
  let(:employee) { create(:employee) }

  before { sign_in employee }
  
  let(:valid_attributes) { attributes_for(:meter) }

  let(:postable_attributes) {
    attributes = valid_attributes
    attributes[:interval] = Meter.interval_options.key(attributes[:interval]).to_s
    attributes
  }

  let(:invalid_attributes) {
    attributes = valid_attributes
    attributes[:name] = ""
    attributes
  }

  describe "GET /index" do
    it "renders a successful response" do
      create(:meter)
      get meters_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      meter = create(:meter)
      get meter_url(meter)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_meter_url
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Meter" do
        expect {
          post meters_url, params: { meter: postable_attributes }
        }.to change(Meter, :count).by(1)
      end

      it "redirects to the created meter" do
        post meters_url, params: { meter: postable_attributes }
        expect(response).to redirect_to(meter_url(Meter.last))
      end

      context "with a start, finish, and interval" do
        let(:valid_attributes) { attributes_for(:meter, start: Date.yesterday, finish: Date.tomorrow, interval: 1.day) }

        it "creates new Measurements" do
          expect {
            post meters_url, params: { meter: postable_attributes }
          }.to change(Measurement, :count).by(2)
        end
      end

      context "with invalid parameters" do
        it "does not create a new Meter" do
          expect {
            post meters_url, params: { meter: invalid_attributes }
          }.to change(Meter, :count).by(0)
        end

        it "renders an unprocessable entity response" do
          post meters_url, params: { meter: invalid_attributes }
          expect(response).to have_http_status(422)
        end
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested meter" do
      meter = create(:meter)
      expect {
        delete meter_url(meter)
      }.to change(Meter, :count).by(-1)
    end

    it "redirects to the meters list" do
      meter = create(:meter)
      delete meter_url(meter)
      expect(response).to redirect_to(meters_url)
    end
  end
end
